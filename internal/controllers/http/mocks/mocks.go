// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nextlag/shortenerURL/internal/controllers (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DoDel mocks base method.
func (m *MockUseCase) DoDel(arg0 int, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoDel", arg0, arg1)
}

// DoDel indicates an expected call of DoDel.
func (mr *MockUseCaseMockRecorder) DoDel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDel", reflect.TypeOf((*MockUseCase)(nil).DoDel), arg0, arg1)
}

// DoGet mocks base method.
func (m *MockUseCase) DoGet(arg0 context.Context, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGet", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGet indicates an expected call of DoGet.
func (mr *MockUseCaseMockRecorder) DoGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockUseCase)(nil).DoGet), arg0, arg1)
}

// DoGetAll mocks base method.
func (m *MockUseCase) DoGetAll(arg0 context.Context, arg1 int, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetAll indicates an expected call of DoGetAll.
func (mr *MockUseCaseMockRecorder) DoGetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetAll", reflect.TypeOf((*MockUseCase)(nil).DoGetAll), arg0, arg1, arg2)
}

// DoGetStats mocks base method.
func (m *MockUseCase) DoGetStats(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetStats", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetStats indicates an expected call of DoGetStats.
func (mr *MockUseCaseMockRecorder) DoGetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetStats", reflect.TypeOf((*MockUseCase)(nil).DoGetStats), arg0)
}

// DoHealthcheck mocks base method.
func (m *MockUseCase) DoHealthcheck() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHealthcheck")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHealthcheck indicates an expected call of DoHealthcheck.
func (mr *MockUseCaseMockRecorder) DoHealthcheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHealthcheck", reflect.TypeOf((*MockUseCase)(nil).DoHealthcheck))
}

// DoPut mocks base method.
func (m *MockUseCase) DoPut(arg0 context.Context, arg1, arg2 string, arg3 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoPut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoPut indicates an expected call of DoPut.
func (mr *MockUseCaseMockRecorder) DoPut(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPut", reflect.TypeOf((*MockUseCase)(nil).DoPut), arg0, arg1, arg2, arg3)
}
